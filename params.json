{
  "name": "poemBot",
  "tagline": "printer + pi + python + poems",
  "body": "# poemBot\r\n\r\n> printer + pi + python + poems. \r\n\r\nEasy to read, carry in your pocket, and share with your friends: poems printed on receipts are fun!\r\n\r\n![poemBot2](https://github.com/evanwill/poemBot/raw/master/poemBot2.JPG)\r\n\r\nPoemBot is a Raspberry Pi connected to a thermal printer offering physical prints from a daily poetry website at the touch of a button. It was developed to help promote the [Vandal Poem of the Day](http://poetry.lib.uidaho.edu/) project which seeks to bring relevant contemporary poetry to University of Idaho and the broader Idaho community.\r\nIn addition to printing poems, poemBot does other fun stuff. It went to a conference, attended a poetry reading, printed the 4H pledge, and created contact cards for library open houses!\r\n\r\nHere is a little video: https://twitter.com/VandalPoem/status/704377485593432065 \r\n\r\nOriginally based on Adafruit IoT Printer, https://learn.adafruit.com/pi-thermal-printer/overview\r\n\r\nUses a version of the printer library from Adafruit Python-Thermal-Printer, https://github.com/adafruit/Python-Thermal-Printer/blob/master/Adafruit_Thermal.py\r\n\r\nA full example implementation is available as `poemsMain.py` using public domain poems. \r\n\r\n## Prepare Poems\r\n\r\nThe printer script loads the poems from a CSV with the columns: VPODdate, title, author, poem, book.\r\nVPODdate is the date the poem appeared as Poem of the Day. \r\nThe poem column contains the full text of the poem with no markup, only \\n. Line indentation is replaced by spaces.\r\nThe book column is the title of the book where the poem appears plus the year of publication.\r\n\r\nI exported all poems from the Wordpress poetry website in XML, with embedded HTML markup. \r\nI used [OpenRefine](https://github.com/OpenRefine/OpenRefine) to parse the XML and transform the data. \r\nI cleaned up the HTML markup, replacing CSS indentation with spaces and adding \\n. \r\n\r\nSince the thermal printer is small with 32 normal characters per line, larger poems could take several feet of paper to print. \r\nI decided to limit the pool of poems based on number of lines and total characters. \r\nThis can be done quickly with OpenRefine by creating new columns based on poem with ```value.split(\"\\n\").length()``` and ```length(value)```, then adding numeric facets. \r\nExport the subset of poems data as CSV from OpenRefine. \r\n\r\nEdit the CSV with a text editor (not LibreOffice or Excel) to remove the header and check the character encoding to avoid issues with Python and the printer. \r\nThe adafruit thermal printer only supports the [CP 437](https://en.wikipedia.org/wiki/Code_page_437) character set.\r\nThe current UTF-8 encoding can generate strange outputs on special characters. \r\nConvert the encoding to CP437.\r\n\r\n## Case and Wiring\r\n\r\nOur physical set up mostly follows [Adafruit IoT Printer](https://learn.adafruit.com/pi-thermal-printer/overview). \r\nHowever, to simplify construction and reuse, I replaced the t-cobbler with jumpers soldered to the components, inspired by [simonmonk's Squid](https://github.com/simonmonk/squid).\r\nI built cases out of 1x6 boards to give the poemBot a solid home.\r\n\r\n## Example Implementation\r\n\r\nThis repository contains the original VPOD files, plus a complete example implementation using public domain poems. \r\nThe main loop is `poemsMain.py` which loads poems to print from `goldenTreasuryPoems.csv`.\r\nI created the poem CSV following a similar method as with VPOD using [OpenRefine](https://github.com/OpenRefine/OpenRefine) to parse the [HTML text](http://www.gutenberg.org/ebooks/19221) from Project Gutenberg.\r\nSince there is no markup other than `<pre>` tags, parsing was mostly achieved using regular expressions.\r\nI selected approximately 100 poems less than 20 lines in length. \r\nThe CSV has the columns: number,title,author,poem,book. Number is the number given in the Golden Treasury.  \r\n\r\n> THE GOLDEN TREASURY\r\n> Of the best Songs and Lyrical Pieces\r\n> In the English Language\r\n> Selected by Francis Turner Palgrave \r\n> 1861\r\n> [Project Gutenberg EBook #19221](http://www.gutenberg.org/ebooks/19221)\r\n\r\n\r\n## Set Up\r\n\r\nThe Raspberry Pi needs to be set up to run headless. \r\nSSH in for set up and testing. \r\nAfter testing the Python main loop and poem printing, set it to load on boot by editing rc.local:\r\n\r\n```sudo nano /etc/rc.local```\r\n\r\nAdd the terminal command to start the python script before the line \"exit 0\":\r\n\r\n```\r\ncd /home/pi/poemBot\r\npython poemsMain.py &\r\n```\r\n\r\n## References\r\n\r\nUBC RAD-device, https://github.com/asistubc/RAD-device\r\n\r\nLittle Box of Poems, http://www.suppertime.co.uk/blogmywiki/2012/12/pi-poems/\r\n\r\nAdafruit IoT Printer, https://learn.adafruit.com/pi-thermal-printer/overview\r\n\r\n\r\n\r\n",
  "google": "UA-74844011-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}